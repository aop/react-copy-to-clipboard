{"version":3,"sources":["../src/CopyToClipboard.js"],"names":[],"mappings":";;;;;;;;;;;;qBAAkB,OAAO;;;;+BACR,mBAAmB;;;;AAEpC,IAAM,OAAO,GAAG,SAAV,OAAO,CAAI,IAAI,EAAE,MAAM;SAAK,YAAM;AACtC,sCAAK,IAAI,CAAC,CAAC;AACX,QAAI,MAAM,EAAE;AACV,YAAM,CAAC,IAAI,CAAC,CAAC;KACd;GACF;CAAA,CAAC;;AAEF,IAAM,WAAW,GAAG,SAAd,WAAW,CAAI,OAAO,EAAE,MAAM;SAAK,YAAM;AAC7C,QAAM,IAAI,GAAG,OAAO,EAAE,CAAC;;AAEvB,WAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;GACvB;CAAA,CAAC;;AAEF,IAAM,eAAe,GAAG,mBAAM,WAAW,CAAC;;;AACxC,WAAS,EAAE;AACT,QAAI,EAAE,mBAAM,SAAS,CAAC,MAAM;AAC5B,WAAO,EAAE,mBAAM,SAAS,CAAC,IAAI;AAC7B,YAAQ,EAAE,mBAAM,SAAS,CAAC,OAAO,CAAC,UAAU;AAC5C,UAAM,EAAE,mBAAM,SAAS,CAAC,IAAI;GAC7B;;AAGD,QAAM,EAAA,kBAAG;AACP,QAAI,OAAO,YAAA,CAAC;iBACwC,IAAI,CAAC,KAAK;QAAvD,IAAI,UAAJ,IAAI;QAAE,OAAO,UAAP,OAAO;QAAE,MAAM,UAAN,MAAM;QAAE,QAAQ,UAAR,QAAQ;;QAAK,KAAK;;AAChD,QAAM,IAAI,GAAG,mBAAM,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;;AAE3C,QAAI,IAAI,IAAI,OAAO,EAAE;AACnB,aAAO,CAAC,KAAK,CAAC,gDAAgD,CAAC,CAAC;AAChE,aAAO,KAAK,CAAC;KACd;AACD,QAAI,CAAC,IAAI,IAAI,CAAC,OAAO,EAAE;AACrB,aAAO,CAAC,KAAK,CAAC,sCAAsC,CAAC,CAAC;AACtD,aAAO,KAAK,CAAC;KACd;;AAED,QAAI,IAAI,EAAE;AACR,aAAO,GAAG,mBAAM,YAAY,CAAC,IAAI,eAC5B,KAAK;AACR,eAAO,EAAE,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC;SAC9B,CAAC;KACJ,MAAM;AACL,aAAO,GAAG,mBAAM,YAAY,CAAC,IAAI,eAC5B,KAAK;AACR,eAAO,EAAE,WAAW,CAAC,OAAO,EAAE,MAAM,CAAC;SACrC,CAAC;KACJ;AACD,WAAO,OAAO,CAAC;GAChB;CACF,CAAC,CAAC;;qBAGY,eAAe","file":"CopyToClipboard.js","sourcesContent":["import React from 'react';\nimport copy from 'copy-to-clipboard';\n\nconst onClick = (text, onCopy) => () => {\n  copy(text);\n  if (onCopy) {\n    onCopy(text);\n  }\n};\n\nconst textOnClick = (getText, onCopy) => () => {\n  const text = getText();\n\n  onClick(text, onCopy);\n};\n\nconst CopyToClipboard = React.createClass({\n  propTypes: {\n    text: React.PropTypes.string,\n    getText: React.PropTypes.func,\n    children: React.PropTypes.element.isRequired,\n    onCopy: React.PropTypes.func\n  },\n\n\n  render() {\n    let retElem;\n    const {text, getText, onCopy, children, ...props} = this.props;\n    const elem = React.Children.only(children);\n\n    if (text && getText) {\n      console.error('Either text or getText must be given, not both');\n      return false;\n    }\n    if (!text && !getText) {\n      console.error('Either text or getText must be given');\n      return false;\n    }\n\n    if (text) {\n      retElem = React.cloneElement(elem, {\n        ...props,\n        onClick: onClick(text, onCopy)\n      });\n    } else {\n      retElem = React.cloneElement(elem, {\n        ...props,\n        onClick: textOnClick(getText, onCopy)\n      });\n    }\n    return retElem;\n  }\n});\n\n\nexport default CopyToClipboard;\n"]}